// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lidar_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lidar_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lidar_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lidar_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lidar_5fdata_2eproto;
namespace enac {
class Lidar;
class LidarDefaultTypeInternal;
extern LidarDefaultTypeInternal _Lidar_default_instance_;
class Obstacles;
class ObstaclesDefaultTypeInternal;
extern ObstaclesDefaultTypeInternal _Obstacles_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class Position_old;
class Position_oldDefaultTypeInternal;
extern Position_oldDefaultTypeInternal _Position_old_default_instance_;
class Proximity;
class ProximityDefaultTypeInternal;
extern ProximityDefaultTypeInternal _Proximity_default_instance_;
}  // namespace enac
PROTOBUF_NAMESPACE_OPEN
template<> ::enac::Lidar* Arena::CreateMaybeMessage<::enac::Lidar>(Arena*);
template<> ::enac::Obstacles* Arena::CreateMaybeMessage<::enac::Obstacles>(Arena*);
template<> ::enac::Pose* Arena::CreateMaybeMessage<::enac::Pose>(Arena*);
template<> ::enac::Position_old* Arena::CreateMaybeMessage<::enac::Position_old>(Arena*);
template<> ::enac::Proximity* Arena::CreateMaybeMessage<::enac::Proximity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace enac {

enum ProximityStatus : int {
  OK = 0,
  WARNING = 1,
  STOP = 2,
  ProximityStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProximityStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProximityStatus_IsValid(int value);
constexpr ProximityStatus ProximityStatus_MIN = OK;
constexpr ProximityStatus ProximityStatus_MAX = STOP;
constexpr int ProximityStatus_ARRAYSIZE = ProximityStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProximityStatus_descriptor();
template<typename T>
inline const std::string& ProximityStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProximityStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProximityStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProximityStatus_descriptor(), enum_t_value);
}
inline bool ProximityStatus_Parse(
    const std::string& name, ProximityStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProximityStatus>(
    ProximityStatus_descriptor(), name, value);
}
// ===================================================================

class Lidar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:enac.Lidar) */ {
 public:
  Lidar();
  virtual ~Lidar();

  Lidar(const Lidar& from);
  Lidar(Lidar&& from) noexcept
    : Lidar() {
    *this = ::std::move(from);
  }

  inline Lidar& operator=(const Lidar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lidar& operator=(Lidar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lidar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lidar* internal_default_instance() {
    return reinterpret_cast<const Lidar*>(
               &_Lidar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Lidar& a, Lidar& b) {
    a.Swap(&b);
  }
  inline void Swap(Lidar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lidar* New() const final {
    return CreateMaybeMessage<Lidar>(nullptr);
  }

  Lidar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lidar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lidar& from);
  void MergeFrom(const Lidar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lidar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enac.Lidar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_5fdata_2eproto);
    return ::descriptor_table_lidar_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnglesFieldNumber = 3,
    kDistancesFieldNumber = 4,
    kIntensitiesFieldNumber = 5,
    kNbPtsFieldNumber = 1,
    kAngleIncrementFieldNumber = 2,
  };
  // repeated float angles = 3;
  int angles_size() const;
  private:
  int _internal_angles_size() const;
  public:
  void clear_angles();
  private:
  float _internal_angles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_angles() const;
  void _internal_add_angles(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_angles();
  public:
  float angles(int index) const;
  void set_angles(int index, float value);
  void add_angles(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      angles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_angles();

  // repeated float distances = 4;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  private:
  float _internal_distances(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_distances() const;
  void _internal_add_distances(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_distances();
  public:
  float distances(int index) const;
  void set_distances(int index, float value);
  void add_distances(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      distances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_distances();

  // repeated uint32 intensities = 5;
  int intensities_size() const;
  private:
  int _internal_intensities_size() const;
  public:
  void clear_intensities();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_intensities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_intensities() const;
  void _internal_add_intensities(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_intensities();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 intensities(int index) const;
  void set_intensities(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_intensities(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      intensities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_intensities();

  // int32 nb_pts = 1;
  void clear_nb_pts();
  ::PROTOBUF_NAMESPACE_ID::int32 nb_pts() const;
  void set_nb_pts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nb_pts() const;
  void _internal_set_nb_pts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float angle_increment = 2;
  void clear_angle_increment();
  float angle_increment() const;
  void set_angle_increment(float value);
  private:
  float _internal_angle_increment() const;
  void _internal_set_angle_increment(float value);
  public:

  // @@protoc_insertion_point(class_scope:enac.Lidar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > angles_;
  mutable std::atomic<int> _angles_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > distances_;
  mutable std::atomic<int> _distances_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > intensities_;
  mutable std::atomic<int> _intensities_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 nb_pts_;
  float angle_increment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lidar_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Pose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:enac.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enac.Pose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_5fdata_2eproto);
    return ::descriptor_table_lidar_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kThetaFieldNumber = 3,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float theta = 3;
  void clear_theta();
  float theta() const;
  void set_theta(float value);
  private:
  float _internal_theta() const;
  void _internal_set_theta(float value);
  public:

  // @@protoc_insertion_point(class_scope:enac.Pose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  float theta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lidar_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Position_old :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:enac.Position_old) */ {
 public:
  Position_old();
  virtual ~Position_old();

  Position_old(const Position_old& from);
  Position_old(Position_old&& from) noexcept
    : Position_old() {
    *this = ::std::move(from);
  }

  inline Position_old& operator=(const Position_old& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position_old& operator=(Position_old&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position_old& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position_old* internal_default_instance() {
    return reinterpret_cast<const Position_old*>(
               &_Position_old_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Position_old& a, Position_old& b) {
    a.Swap(&b);
  }
  inline void Swap(Position_old* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position_old* New() const final {
    return CreateMaybeMessage<Position_old>(nullptr);
  }

  Position_old* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position_old>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position_old& from);
  void MergeFrom(const Position_old& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position_old* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enac.Position_old";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_5fdata_2eproto);
    return ::descriptor_table_lidar_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kThetaFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float theta = 3;
  void clear_theta();
  float theta() const;
  void set_theta(float value);
  private:
  float _internal_theta() const;
  void _internal_set_theta(float value);
  public:

  // @@protoc_insertion_point(class_scope:enac.Position_old)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float theta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lidar_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Proximity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:enac.Proximity) */ {
 public:
  Proximity();
  virtual ~Proximity();

  Proximity(const Proximity& from);
  Proximity(Proximity&& from) noexcept
    : Proximity() {
    *this = ::std::move(from);
  }

  inline Proximity& operator=(const Proximity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proximity& operator=(Proximity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proximity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proximity* internal_default_instance() {
    return reinterpret_cast<const Proximity*>(
               &_Proximity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Proximity& a, Proximity& b) {
    a.Swap(&b);
  }
  inline void Swap(Proximity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proximity* New() const final {
    return CreateMaybeMessage<Proximity>(nullptr);
  }

  Proximity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proximity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proximity& from);
  void MergeFrom(const Proximity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proximity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enac.Proximity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_5fdata_2eproto);
    return ::descriptor_table_lidar_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClosestDistanceFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // float closest_distance = 1;
  void clear_closest_distance();
  float closest_distance() const;
  void set_closest_distance(float value);
  private:
  float _internal_closest_distance() const;
  void _internal_set_closest_distance(float value);
  public:

  // .enac.ProximityStatus status = 2;
  void clear_status();
  ::enac::ProximityStatus status() const;
  void set_status(::enac::ProximityStatus value);
  private:
  ::enac::ProximityStatus _internal_status() const;
  void _internal_set_status(::enac::ProximityStatus value);
  public:

  // @@protoc_insertion_point(class_scope:enac.Proximity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float closest_distance_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lidar_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Obstacles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:enac.Obstacles) */ {
 public:
  Obstacles();
  virtual ~Obstacles();

  Obstacles(const Obstacles& from);
  Obstacles(Obstacles&& from) noexcept
    : Obstacles() {
    *this = ::std::move(from);
  }

  inline Obstacles& operator=(const Obstacles& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacles& operator=(Obstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacles* internal_default_instance() {
    return reinterpret_cast<const Obstacles*>(
               &_Obstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Obstacles& a, Obstacles& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacles* New() const final {
    return CreateMaybeMessage<Obstacles>(nullptr);
  }

  Obstacles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacles& from);
  void MergeFrom(const Obstacles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enac.Obstacles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_5fdata_2eproto);
    return ::descriptor_table_lidar_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // repeated float x = 1;
  int x_size() const;
  private:
  int _internal_x_size() const;
  public:
  void clear_x();
  private:
  float _internal_x(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_x() const;
  void _internal_add_x(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_x();
  public:
  float x(int index) const;
  void set_x(int index, float value);
  void add_x(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_x();

  // repeated float y = 2;
  int y_size() const;
  private:
  int _internal_y_size() const;
  public:
  void clear_y();
  private:
  float _internal_y(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_y() const;
  void _internal_add_y(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_y();
  public:
  float y(int index) const;
  void set_y(int index, float value);
  void add_y(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_y();

  // @@protoc_insertion_point(class_scope:enac.Obstacles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > x_;
  mutable std::atomic<int> _x_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > y_;
  mutable std::atomic<int> _y_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lidar_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Lidar

// int32 nb_pts = 1;
inline void Lidar::clear_nb_pts() {
  nb_pts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lidar::_internal_nb_pts() const {
  return nb_pts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lidar::nb_pts() const {
  // @@protoc_insertion_point(field_get:enac.Lidar.nb_pts)
  return _internal_nb_pts();
}
inline void Lidar::_internal_set_nb_pts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nb_pts_ = value;
}
inline void Lidar::set_nb_pts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nb_pts(value);
  // @@protoc_insertion_point(field_set:enac.Lidar.nb_pts)
}

// float angle_increment = 2;
inline void Lidar::clear_angle_increment() {
  angle_increment_ = 0;
}
inline float Lidar::_internal_angle_increment() const {
  return angle_increment_;
}
inline float Lidar::angle_increment() const {
  // @@protoc_insertion_point(field_get:enac.Lidar.angle_increment)
  return _internal_angle_increment();
}
inline void Lidar::_internal_set_angle_increment(float value) {
  
  angle_increment_ = value;
}
inline void Lidar::set_angle_increment(float value) {
  _internal_set_angle_increment(value);
  // @@protoc_insertion_point(field_set:enac.Lidar.angle_increment)
}

// repeated float angles = 3;
inline int Lidar::_internal_angles_size() const {
  return angles_.size();
}
inline int Lidar::angles_size() const {
  return _internal_angles_size();
}
inline void Lidar::clear_angles() {
  angles_.Clear();
}
inline float Lidar::_internal_angles(int index) const {
  return angles_.Get(index);
}
inline float Lidar::angles(int index) const {
  // @@protoc_insertion_point(field_get:enac.Lidar.angles)
  return _internal_angles(index);
}
inline void Lidar::set_angles(int index, float value) {
  angles_.Set(index, value);
  // @@protoc_insertion_point(field_set:enac.Lidar.angles)
}
inline void Lidar::_internal_add_angles(float value) {
  angles_.Add(value);
}
inline void Lidar::add_angles(float value) {
  _internal_add_angles(value);
  // @@protoc_insertion_point(field_add:enac.Lidar.angles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Lidar::_internal_angles() const {
  return angles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Lidar::angles() const {
  // @@protoc_insertion_point(field_list:enac.Lidar.angles)
  return _internal_angles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Lidar::_internal_mutable_angles() {
  return &angles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Lidar::mutable_angles() {
  // @@protoc_insertion_point(field_mutable_list:enac.Lidar.angles)
  return _internal_mutable_angles();
}

// repeated float distances = 4;
inline int Lidar::_internal_distances_size() const {
  return distances_.size();
}
inline int Lidar::distances_size() const {
  return _internal_distances_size();
}
inline void Lidar::clear_distances() {
  distances_.Clear();
}
inline float Lidar::_internal_distances(int index) const {
  return distances_.Get(index);
}
inline float Lidar::distances(int index) const {
  // @@protoc_insertion_point(field_get:enac.Lidar.distances)
  return _internal_distances(index);
}
inline void Lidar::set_distances(int index, float value) {
  distances_.Set(index, value);
  // @@protoc_insertion_point(field_set:enac.Lidar.distances)
}
inline void Lidar::_internal_add_distances(float value) {
  distances_.Add(value);
}
inline void Lidar::add_distances(float value) {
  _internal_add_distances(value);
  // @@protoc_insertion_point(field_add:enac.Lidar.distances)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Lidar::_internal_distances() const {
  return distances_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Lidar::distances() const {
  // @@protoc_insertion_point(field_list:enac.Lidar.distances)
  return _internal_distances();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Lidar::_internal_mutable_distances() {
  return &distances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Lidar::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:enac.Lidar.distances)
  return _internal_mutable_distances();
}

// repeated uint32 intensities = 5;
inline int Lidar::_internal_intensities_size() const {
  return intensities_.size();
}
inline int Lidar::intensities_size() const {
  return _internal_intensities_size();
}
inline void Lidar::clear_intensities() {
  intensities_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lidar::_internal_intensities(int index) const {
  return intensities_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lidar::intensities(int index) const {
  // @@protoc_insertion_point(field_get:enac.Lidar.intensities)
  return _internal_intensities(index);
}
inline void Lidar::set_intensities(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:enac.Lidar.intensities)
}
inline void Lidar::_internal_add_intensities(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  intensities_.Add(value);
}
inline void Lidar::add_intensities(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_intensities(value);
  // @@protoc_insertion_point(field_add:enac.Lidar.intensities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Lidar::_internal_intensities() const {
  return intensities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Lidar::intensities() const {
  // @@protoc_insertion_point(field_list:enac.Lidar.intensities)
  return _internal_intensities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Lidar::_internal_mutable_intensities() {
  return &intensities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Lidar::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:enac.Lidar.intensities)
  return _internal_mutable_intensities();
}

// -------------------------------------------------------------------

// Pose

// int32 x = 1;
inline void Pose::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pose::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pose::x() const {
  // @@protoc_insertion_point(field_get:enac.Pose.x)
  return _internal_x();
}
inline void Pose::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Pose::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:enac.Pose.x)
}

// int32 y = 2;
inline void Pose::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pose::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pose::y() const {
  // @@protoc_insertion_point(field_get:enac.Pose.y)
  return _internal_y();
}
inline void Pose::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Pose::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:enac.Pose.y)
}

// float theta = 3;
inline void Pose::clear_theta() {
  theta_ = 0;
}
inline float Pose::_internal_theta() const {
  return theta_;
}
inline float Pose::theta() const {
  // @@protoc_insertion_point(field_get:enac.Pose.theta)
  return _internal_theta();
}
inline void Pose::_internal_set_theta(float value) {
  
  theta_ = value;
}
inline void Pose::set_theta(float value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:enac.Pose.theta)
}

// -------------------------------------------------------------------

// Position_old

// float x = 1;
inline void Position_old::clear_x() {
  x_ = 0;
}
inline float Position_old::_internal_x() const {
  return x_;
}
inline float Position_old::x() const {
  // @@protoc_insertion_point(field_get:enac.Position_old.x)
  return _internal_x();
}
inline void Position_old::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Position_old::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:enac.Position_old.x)
}

// float y = 2;
inline void Position_old::clear_y() {
  y_ = 0;
}
inline float Position_old::_internal_y() const {
  return y_;
}
inline float Position_old::y() const {
  // @@protoc_insertion_point(field_get:enac.Position_old.y)
  return _internal_y();
}
inline void Position_old::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Position_old::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:enac.Position_old.y)
}

// float theta = 3;
inline void Position_old::clear_theta() {
  theta_ = 0;
}
inline float Position_old::_internal_theta() const {
  return theta_;
}
inline float Position_old::theta() const {
  // @@protoc_insertion_point(field_get:enac.Position_old.theta)
  return _internal_theta();
}
inline void Position_old::_internal_set_theta(float value) {
  
  theta_ = value;
}
inline void Position_old::set_theta(float value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:enac.Position_old.theta)
}

// -------------------------------------------------------------------

// Proximity

// float closest_distance = 1;
inline void Proximity::clear_closest_distance() {
  closest_distance_ = 0;
}
inline float Proximity::_internal_closest_distance() const {
  return closest_distance_;
}
inline float Proximity::closest_distance() const {
  // @@protoc_insertion_point(field_get:enac.Proximity.closest_distance)
  return _internal_closest_distance();
}
inline void Proximity::_internal_set_closest_distance(float value) {
  
  closest_distance_ = value;
}
inline void Proximity::set_closest_distance(float value) {
  _internal_set_closest_distance(value);
  // @@protoc_insertion_point(field_set:enac.Proximity.closest_distance)
}

// .enac.ProximityStatus status = 2;
inline void Proximity::clear_status() {
  status_ = 0;
}
inline ::enac::ProximityStatus Proximity::_internal_status() const {
  return static_cast< ::enac::ProximityStatus >(status_);
}
inline ::enac::ProximityStatus Proximity::status() const {
  // @@protoc_insertion_point(field_get:enac.Proximity.status)
  return _internal_status();
}
inline void Proximity::_internal_set_status(::enac::ProximityStatus value) {
  
  status_ = value;
}
inline void Proximity::set_status(::enac::ProximityStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:enac.Proximity.status)
}

// -------------------------------------------------------------------

// Obstacles

// repeated float x = 1;
inline int Obstacles::_internal_x_size() const {
  return x_.size();
}
inline int Obstacles::x_size() const {
  return _internal_x_size();
}
inline void Obstacles::clear_x() {
  x_.Clear();
}
inline float Obstacles::_internal_x(int index) const {
  return x_.Get(index);
}
inline float Obstacles::x(int index) const {
  // @@protoc_insertion_point(field_get:enac.Obstacles.x)
  return _internal_x(index);
}
inline void Obstacles::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:enac.Obstacles.x)
}
inline void Obstacles::_internal_add_x(float value) {
  x_.Add(value);
}
inline void Obstacles::add_x(float value) {
  _internal_add_x(value);
  // @@protoc_insertion_point(field_add:enac.Obstacles.x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Obstacles::_internal_x() const {
  return x_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Obstacles::x() const {
  // @@protoc_insertion_point(field_list:enac.Obstacles.x)
  return _internal_x();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Obstacles::_internal_mutable_x() {
  return &x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Obstacles::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:enac.Obstacles.x)
  return _internal_mutable_x();
}

// repeated float y = 2;
inline int Obstacles::_internal_y_size() const {
  return y_.size();
}
inline int Obstacles::y_size() const {
  return _internal_y_size();
}
inline void Obstacles::clear_y() {
  y_.Clear();
}
inline float Obstacles::_internal_y(int index) const {
  return y_.Get(index);
}
inline float Obstacles::y(int index) const {
  // @@protoc_insertion_point(field_get:enac.Obstacles.y)
  return _internal_y(index);
}
inline void Obstacles::set_y(int index, float value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:enac.Obstacles.y)
}
inline void Obstacles::_internal_add_y(float value) {
  y_.Add(value);
}
inline void Obstacles::add_y(float value) {
  _internal_add_y(value);
  // @@protoc_insertion_point(field_add:enac.Obstacles.y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Obstacles::_internal_y() const {
  return y_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Obstacles::y() const {
  // @@protoc_insertion_point(field_list:enac.Obstacles.y)
  return _internal_y();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Obstacles::_internal_mutable_y() {
  return &y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Obstacles::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:enac.Obstacles.y)
  return _internal_mutable_y();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace enac

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::enac::ProximityStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enac::ProximityStatus>() {
  return ::enac::ProximityStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lidar_5fdata_2eproto
